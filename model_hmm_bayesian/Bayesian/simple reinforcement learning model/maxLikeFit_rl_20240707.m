function [output]=maxLikeFit_rl_20240707(input)

%20230123 change fminoptions=optimoptions('fmincon','FiniteDifferenceStepSize',0.1);
%to fminoptions=optimoptions('fmincon','FiniteDifferenceStepSize',0.01);

%% Nested function to find Maximum Log Likelihood parameters of RW in a bandit task
%  *The inner function will have access to the inputs of the outer function

% input should contain the following fields:

%% These inputs specify the exact task, behavior, and model you are fitting:
%input.rewardsMatrix -- a number of arms X number of trials matrix of all
%                       possible rewards that could be received
%input.Q             -- initial Q values for each bandit
%input.useSoftmax    -- true --> softmax, false --> e-greedy.
%input.choices       -- vector of choices made by subject on each tria
%% These inputs specify details of how you will do the fitting:
%input.startPoint    -- what parameter values will you start your gradient descent from?
%input.LB            -- vector specifying lowest value of each parameter that you want to consider
%input.UB            -- vector specifying highest value of each parameter that you want to consider


% % Call fmincon to minimize NLL for the specified range of parameter values:
fminoptions=optimoptions('fmincon','FiniteDifferenceStepSize',0.1);

%fminoptions.FiniteDifferenceStepSize=0.1;
[ML_params, NLL]= fmincon(@callBanditLike,input.startPoint,[],[],[],[],input.LB,input.UB,[],fminoptions)
output=struct;
output.params       =ML_params;
output.logLikelihood=-NLL;

% parpool(4);
% % [X1,X2,X3,X4,X5,X6] = ndgrid([20,-10],[40,0],[0 1],[0 1],[0 10],[0 10]);
% % W = [X1(:),X2(:),X3(:),X4(:),X5(:),X6(:)];
% % %W = W + 0.01*randn(size(W));
% % custpts = CustomStartPointSet(W);
% 
% fminoptions=optimoptions('fmincon','FiniteDifferenceStepSize',0.001);%('fmincon','FiniteDifferenceStepSize',0.01);
% %x0=input.LB+(input.UB-input.LB).*rand(1,6);
% 
% problem = createOptimProblem('fmincon','objective',@callBanditLike,'x0',input.startPoint,'lb',input.LB,'ub',input.UB,'options',fminoptions);
% %problem = createOptimProblem('fmincon','objective',@callBanditLike,'x0',input.LB+(input.UB-input.LB).*rand(1,6),'lb',input.LB,'ub',input.UB,'options',fminoptions);
% 
% ms = MultiStart('UseParallel', true);
% %stpoints = RandomStartPointSet;
% 
% %[ML_params,fval,~,msoutput,solutions] = run(ms,problem,custpts);
% [ML_params,fval,~,msoutput,solutions] = run(ms,problem,4);
% 
% % Store best fitting parameters and total log likelihood:
% output=struct;
% output.params       =ML_params;
% output.msoutput       =msoutput ;
% output.fval       =fval ;
% output.solutions=solutions;
% output.logLikelihood=-NLL;

    function [NLL]=callBanditLike(params)
        
        % Call your bandits fitting function using the parameters generated by
        % fmincon -- these will come in as the first input to the function
        % (eg. params):

        % ADD A CALL TO YOUR banditLike FUNCTION HERE:
        % [NLL] = banditLike(****, ****, ****, *****, etc);
        %fitBayesian_NormalGaussian(mu0hr, std0hr, mu0lr, std0lr, stddatahr,actions,pressn)
        
        [NLL] = fitModel_RL(params(1),params(2),input.actions,input.pressn)
        fprintf('alpha %3.4f hr_m0 %3.4f %3.4f NLL %d\n',params(1),params(2),NLL);
        %fitBayesianModelextreme(alpha,hr_m0,actions,pressn)
    end
end
