function [output]=maxLikeFit_hmmtest_3state(input)
%20220330 considering each block seperate (do not put them together)
%20220405 change emission rate to 0.9 0.9
%% Nested function to find Maximum Log Likelihood parameters of RW in a bandit task
%  *The inner function will have access to the inputs of the outer function

% input should contain the following fields:

%% These inputs specify the exact task, behavior, and model you are fitting:
%input.rewardsMatrix -- a number of arms X number of trials matrix of all
%                       possible rewards that could be received
%input.Q             -- initial Q values for each bandit
%input.useSoftmax    -- true --> softmax, false --> e-greedy.
%input.choices       -- vector of choices made by subject on each tria
%% These inputs specify details of how you will do the fitting:
%input.startPoint    -- what parameter values will you start your gradient descent from?
%input.LB            -- vector specifying lowest value of each parameter that you want to consider
%input.UB            -- vector specifying highest value of each parameter that you want to consider


% Call fmincon to minimize NLL for the specified range of parameter values:

A=[1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0;
    0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0;
    0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0;
    0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0;
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1;];
b=[1;1;1;1;1;1;1;1];
[ML_params, NLL]= fmincon(@callBanditLike,input.startPoint,A,b,[],[],input.LB,input.UB)


% Store best fitting parameters and total log likelihood:
output=struct;
output.params       =ML_params;
output.logLikelihood=-NLL;

    function [NLL]=callBanditLike(params)
        
        % Call your bandits fitting function using the parameters generated by
        % fmincon -- these will come in as the first input to the function
        % (eg. params):

        % ADD A CALL TO YOUR banditLike FUNCTION HERE:
        % [NLL] = banditLike(****, ****, ****, *****, etc);
        %fitBayesianModel_mulsessions(alpha0,a0,b0,noisyfactorhr,noisyfactorlr,actions,pressn)
        NLL=0;
        Eguess=[params(13),1-params(13);params(14),1-params(14);params(15),1-params(15);params(16),1-params(16)];
        Tguess=[params(1),params(2),params(3),1-params(1)-params(2)-params(3);params(4),params(5),params(6),1-params(4)-params(5)-params(6);params(7),params(8),params(9),1-params(7)-params(8)-params(9);params(10),params(11),params(12),1-params(10)-params(11)-params(12)];
        for blocki=1:length(input.seq)
            [~,LL] = hmmdecode(input.seq{blocki}, Tguess, Eguess);
            NLL=NLL-LL;
        end
        %NLL=-LL;

    end
end
